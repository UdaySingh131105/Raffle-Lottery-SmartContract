{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_baseFee",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_gasPrice",
          "type": "uint96"
        },
        {
          "internalType": "int256",
          "name": "_weiPerUnitLink",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "externalBalance",
          "type": "uint256"
        }
      ],
      "name": "BalanceInvariantViolated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToSendNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToTransferLink",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExtraArgsTag",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRandomWords",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSubscription",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "MustBeRequestedOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "MustBeSubOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCallableFromLink",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingRequestExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyConsumers",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeFundsRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payment",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "nativePayment",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "onlyPremium",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraArgs",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLink",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNative",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "SubscriptionConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "SubscriptionConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldNativeBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNativeBalance",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionFundedWithNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SubscriptionOwnerTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SubscriptionOwnerTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LINK_NATIVE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CONSUMERS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "acceptSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "consumerIsAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_words",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWordsWithOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "fundSubscriptionWithNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCount",
          "type": "uint256"
        }
      ],
      "name": "getActiveSubscriptionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "balance",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "nativeBalance",
          "type": "uint96"
        },
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "subOwner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "consumers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_base_fee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gas_price",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_wei_per_unit_link",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "ownerCancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverNativeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "keyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "subId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "requestConfirmations",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numWords",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct VRFV2PlusClient.RandomWordsRequest",
          "name": "_req",
          "type": "tuple"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "requestSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_config",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "reentrancyLock",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "stalenessSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeNativePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkDiscountPPM",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "nativePremiumPercentage",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "linkPremiumPercentage",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_currentSubNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalBalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalNativeBalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linkNativeFeed",
          "type": "address"
        }
      ],
      "name": "setLINKAndLINKNativeFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb68aa724860c66bf9bf1b360ecda126e130289fd379cd2814fb76833867acca",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3289785",
    "logsBloom": "0x
    "blockHash": "0x5d008dc378526632ea859e58bea3c2f399e766981149ff12905d53d29395425b",
    "transactionHash": "0xbb68aa724860c66bf9bf1b360ecda126e130289fd379cd2814fb76833867acca",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xbb68aa724860c66bf9bf1b360ecda126e130289fd379cd2814fb76833867acca",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5d008dc378526632ea859e58bea3c2f399e766981149ff12905d53d29395425b"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3289785",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "250000000000000000",
    1000000000,
    4323045521844006
  ],
  "numDeployments": 1,
  "solcInputHash": "307f88e19a43313af83d611d138e20de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_baseFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_gasPrice\",\"type\":\"uint96\"},{\"internalType\":\"int256\",\"name\":\"_weiPerUnitLink\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceInvariantViolated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToSendNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToTransferLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExtraArgsTag\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomWords\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableFromLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeFundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nativePayment\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onlyPremium\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLink\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNative\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNativeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNativeBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFundedWithNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_NATIVE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"consumerIsAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_words\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWordsWithOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"subOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_base_fee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gas_price\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_wei_per_unit_link\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"ownerCancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverNativeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct VRFV2PlusClient.RandomWordsRequest\",\"name\":\"_req\",\"type\":\"tuple\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_config\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"reentrancyLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeNativePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkDiscountPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"nativePremiumPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"linkPremiumPercentage\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_currentSubNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalNativeBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkNativeFeed\",\"type\":\"address\"}],\"name\":\"setLINKAndLINKNativeFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"fulfillRandomWords(uint256,address)\":{\"details\":\"This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.\",\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\"}},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\",\"_words\":\"user-provided random words\"}},\"fundSubscription(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to fund\",\"_subId\":\"the subscription to fund\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"reqCount\":\"- Requests count of subscription.\",\"subOwner\":\"- owner of the subscription.\"}},\"ownerCancelSubscription(uint256)\":{\"details\":\"notably can be called even if there are pending requests, outstanding ones may fail onchain\",\"params\":{\"subId\":\"subscription id\"}},\"recoverFunds(address)\":{\"params\":{\"to\":\"address to send link to\"}},\"recoverNativeFunds(address)\":{\"params\":{\"to\":\"address to send native to\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}},\"setLINKAndLINKNativeFeed(address,address)\":{\"params\":{\"link\":\"- address of link token\",\"linkNativeFeed\":\"address of the link native feed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fulfillRandomWords(uint256,address)\":{\"notice\":\"fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer.\"},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"notice\":\"fulfillRandomWordsWithOverride allows the user to pass in their own random words.\"},\"fundSubscription(uint256,uint256)\":{\"notice\":\"fundSubscription allows funding a subscription with an arbitrary amount for testing.\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active VRF subscriptions.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a VRF subscription.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"ownerCancelSubscription(uint256)\":{\"notice\":\"Owner cancel subscription, sends remaining link directly to the subscription owner.\"},\"recoverFunds(address)\":{\"notice\":\"Recover link sent with transfer instead of transferAndCall.\"},\"recoverNativeFunds(address)\":{\"notice\":\"Recover native sent with transfer/call/send instead of fundSubscription.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"},\"setConfig()\":{\"notice\":\"Sets the configuration of the vrfv2 mock coordinator\"},\"setLINKAndLINKNativeFeed(address,address)\":{\"notice\":\"set the LINK token contract and link native feed to be used by this coordinator\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol\":\"VRFCoordinatorV2_5Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5f9ee31598e2250815033c2f4e1e7e747f917815378938505063df1d4ae603ec\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.7.3/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7c71fcc0e9b596196c599468338a3289f4ca1e2fcf8cad721ae48a9b562af79c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/SubscriptionAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {EnumerableSet} from \\\"../../vendor/openzeppelin-solidity/v4.7.3/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LinkTokenInterface} from \\\"../../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\nimport {AggregatorV3Interface} from \\\"../../shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC677Receiver} from \\\"../../shared/interfaces/IERC677Receiver.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./interfaces/IVRFSubscriptionV2Plus.sol\\\";\\n\\nabstract contract SubscriptionAPI is ConfirmedOwner, IERC677Receiver, IVRFSubscriptionV2Plus {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  /// @dev may not be provided upon construction on some chains due to lack of availability\\n  LinkTokenInterface public LINK;\\n  /// @dev may not be provided upon construction on some chains due to lack of availability\\n  AggregatorV3Interface public LINK_NATIVE_FEED;\\n\\n  // We need to maintain a list of consuming addresses.\\n  // This bound ensures we are able to loop over them as needed.\\n  // Should a user require more consumers, they can use multiple subscriptions.\\n  uint16 public constant MAX_CONSUMERS = 100;\\n  error TooManyConsumers();\\n  error InsufficientBalance();\\n  error InvalidConsumer(uint256 subId, address consumer);\\n  error InvalidSubscription();\\n  error OnlyCallableFromLink();\\n  error InvalidCalldata();\\n  error MustBeSubOwner(address owner);\\n  error PendingRequestExists();\\n  error MustBeRequestedOwner(address proposedOwner);\\n  error BalanceInvariantViolated(uint256 internalBalance, uint256 externalBalance); // Should never happen\\n  event FundsRecovered(address to, uint256 amount);\\n  event NativeFundsRecovered(address to, uint256 amount);\\n  error LinkAlreadySet();\\n  error FailedToSendNative();\\n  error FailedToTransferLink();\\n  error IndexOutOfRange();\\n  error LinkNotSet();\\n\\n  // We use the subscription struct (1 word)\\n  // at fulfillment time.\\n  struct Subscription {\\n    // There are only 1e9*1e18 = 1e27 juels in existence, so the balance can fit in uint96 (2^96 ~ 7e28)\\n    uint96 balance; // Common link balance used for all consumer requests.\\n    // a uint96 is large enough to hold around ~8e28 wei, or 80 billion ether.\\n    // That should be enough to cover most (if not all) subscriptions.\\n    uint96 nativeBalance; // Common native balance used for all consumer requests.\\n    uint64 reqCount;\\n  }\\n  // We use the config for the mgmt APIs\\n  struct SubscriptionConfig {\\n    address owner; // Owner can fund/withdraw/cancel the sub.\\n    address requestedOwner; // For safely transferring sub ownership.\\n    // Maintains the list of keys in s_consumers.\\n    // We do this for 2 reasons:\\n    // 1. To be able to clean up all keys from s_consumers when canceling a subscription.\\n    // 2. To be able to return the list of all consumers in getSubscription.\\n    // Note that we need the s_consumers map to be able to directly check if a\\n    // consumer is valid without reading all the consumers from storage.\\n    address[] consumers;\\n  }\\n  struct ConsumerConfig {\\n    bool active;\\n    uint64 nonce;\\n    uint64 pendingReqCount;\\n  }\\n  // Note a nonce of 0 indicates the consumer is not assigned to that subscription.\\n  mapping(address => mapping(uint256 => ConsumerConfig)) /* consumerAddress */ /* subId */ /* consumerConfig */\\n    internal s_consumers;\\n  mapping(uint256 => SubscriptionConfig) /* subId */ /* subscriptionConfig */ internal s_subscriptionConfigs;\\n  mapping(uint256 => Subscription) /* subId */ /* subscription */ internal s_subscriptions;\\n  // subscription nonce used to construct subId. Rises monotonically\\n  uint64 public s_currentSubNonce;\\n  // track all subscription id's that were created by this contract\\n  // note: access should be through the getActiveSubscriptionIds() view function\\n  // which takes a starting index and a max number to fetch in order to allow\\n  // \\\"pagination\\\" of the subscription ids. in the event a very large number of\\n  // subscription id's are stored in this set, they cannot be retrieved in a\\n  // single RPC call without violating various size limits.\\n  EnumerableSet.UintSet internal s_subIds;\\n  // s_totalBalance tracks the total link sent to/from\\n  // this contract through onTokenTransfer, cancelSubscription and oracleWithdraw.\\n  // A discrepancy with this contract's link balance indicates someone\\n  // sent tokens using transfer and so we may need to use recoverFunds.\\n  uint96 public s_totalBalance;\\n  // s_totalNativeBalance tracks the total native sent to/from\\n  // this contract through fundSubscription, cancelSubscription and oracleWithdrawNative.\\n  // A discrepancy with this contract's native balance indicates someone\\n  // sent native using transfer and so we may need to use recoverNativeFunds.\\n  uint96 public s_totalNativeBalance;\\n  uint96 internal s_withdrawableTokens;\\n  uint96 internal s_withdrawableNative;\\n\\n  event SubscriptionCreated(uint256 indexed subId, address owner);\\n  event SubscriptionFunded(uint256 indexed subId, uint256 oldBalance, uint256 newBalance);\\n  event SubscriptionFundedWithNative(uint256 indexed subId, uint256 oldNativeBalance, uint256 newNativeBalance);\\n  event SubscriptionConsumerAdded(uint256 indexed subId, address consumer);\\n  event SubscriptionConsumerRemoved(uint256 indexed subId, address consumer);\\n  event SubscriptionCanceled(uint256 indexed subId, address to, uint256 amountLink, uint256 amountNative);\\n  event SubscriptionOwnerTransferRequested(uint256 indexed subId, address from, address to);\\n  event SubscriptionOwnerTransferred(uint256 indexed subId, address from, address to);\\n\\n  struct Config {\\n    uint16 minimumRequestConfirmations;\\n    uint32 maxGasLimit;\\n    // Reentrancy protection.\\n    bool reentrancyLock;\\n    // stalenessSeconds is how long before we consider the feed price to be stale\\n    // and fallback to fallbackWeiPerUnitLink.\\n    uint32 stalenessSeconds;\\n    // Gas to cover oracle payment after we calculate the payment.\\n    // We make it configurable in case those operations are repriced.\\n    // The recommended number is below, though it may vary slightly\\n    // if certain chains do not implement certain EIP's.\\n    // 21000 + // base cost of the transaction\\n    // 100 + 5000 + // warm subscription balance read and update. See https://eips.ethereum.org/EIPS/eip-2929\\n    // 2*2100 + 5000 - // cold read oracle address and oracle balance and first time oracle balance update, note first time will be 20k, but 5k subsequently\\n    // 4800 + // request delete refund (refunds happen after execution), note pre-london fork was 15k. See https://eips.ethereum.org/EIPS/eip-3529\\n    // 6685 + // Positive static costs of argument encoding etc. note that it varies by +/- x*12 for every x bytes of non-zero data in the proof.\\n    // Total: 37,185 gas.\\n    uint32 gasAfterPaymentCalculation;\\n    // Flat fee charged per fulfillment in millionths of native.\\n    // So fee range is [0, 2^32/10^6].\\n    uint32 fulfillmentFlatFeeNativePPM;\\n    // Discount relative to fulfillmentFlatFeeNativePPM for link payment in millionths of native\\n    // Should not exceed fulfillmentFlatFeeNativePPM\\n    // So fee range is [0, 2^32/10^6].\\n    uint32 fulfillmentFlatFeeLinkDiscountPPM;\\n    // nativePremiumPercentage is the percentage of the total gas costs that is added to the final premium for native payment\\n    // nativePremiumPercentage = 10 means 10% of the total gas costs is added. only integral percentage is allowed\\n    uint8 nativePremiumPercentage;\\n    // linkPremiumPercentage is the percentage of total gas costs that is added to the final premium for link payment\\n    // linkPremiumPercentage = 10 means 10% of the total gas costs is added. only integral percentage is allowed\\n    uint8 linkPremiumPercentage;\\n  }\\n  Config public s_config;\\n\\n  error Reentrant();\\n  modifier nonReentrant() {\\n    _nonReentrant();\\n    _;\\n  }\\n\\n  function _nonReentrant() internal view {\\n    if (s_config.reentrancyLock) {\\n      revert Reentrant();\\n    }\\n  }\\n\\n  constructor() ConfirmedOwner(msg.sender) {}\\n\\n  /**\\n   * @notice set the LINK token contract and link native feed to be\\n   * used by this coordinator\\n   * @param link - address of link token\\n   * @param linkNativeFeed address of the link native feed\\n   */\\n  function setLINKAndLINKNativeFeed(address link, address linkNativeFeed) external onlyOwner {\\n    // Disallow re-setting link token because the logic wouldn't really make sense\\n    if (address(LINK) != address(0)) {\\n      revert LinkAlreadySet();\\n    }\\n    LINK = LinkTokenInterface(link);\\n    LINK_NATIVE_FEED = AggregatorV3Interface(linkNativeFeed);\\n  }\\n\\n  /**\\n   * @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n   * @param subId subscription id\\n   * @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n   */\\n  function ownerCancelSubscription(uint256 subId) external onlyOwner {\\n    address subOwner = s_subscriptionConfigs[subId].owner;\\n    if (subOwner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    _cancelSubscriptionHelper(subId, subOwner);\\n  }\\n\\n  /**\\n   * @notice Recover link sent with transfer instead of transferAndCall.\\n   * @param to address to send link to\\n   */\\n  function recoverFunds(address to) external onlyOwner {\\n    // If LINK is not set, we cannot recover funds.\\n    // It is possible that this coordinator address was funded with LINK\\n    // by accident by a user but the LINK token needs to be set first\\n    // before we can recover it.\\n    if (address(LINK) == address(0)) {\\n      revert LinkNotSet();\\n    }\\n\\n    uint256 externalBalance = LINK.balanceOf(address(this));\\n    uint256 internalBalance = uint256(s_totalBalance);\\n    if (internalBalance > externalBalance) {\\n      revert BalanceInvariantViolated(internalBalance, externalBalance);\\n    }\\n    if (internalBalance < externalBalance) {\\n      uint256 amount = externalBalance - internalBalance;\\n      if (!LINK.transfer(to, amount)) {\\n        revert FailedToTransferLink();\\n      }\\n      emit FundsRecovered(to, amount);\\n    }\\n    // If the balances are equal, nothing to be done.\\n  }\\n\\n  /**\\n   * @notice Recover native sent with transfer/call/send instead of fundSubscription.\\n   * @param to address to send native to\\n   */\\n  function recoverNativeFunds(address payable to) external onlyOwner {\\n    uint256 externalBalance = address(this).balance;\\n    uint256 internalBalance = uint256(s_totalNativeBalance);\\n    if (internalBalance > externalBalance) {\\n      revert BalanceInvariantViolated(internalBalance, externalBalance);\\n    }\\n    if (internalBalance < externalBalance) {\\n      uint256 amount = externalBalance - internalBalance;\\n      (bool sent, ) = to.call{value: amount}(\\\"\\\");\\n      if (!sent) {\\n        revert FailedToSendNative();\\n      }\\n      emit NativeFundsRecovered(to, amount);\\n    }\\n    // If the balances are equal, nothing to be done.\\n  }\\n\\n  /*\\n   * @notice withdraw LINK earned through fulfilling requests\\n   * @param recipient where to send the funds\\n   * @param amount amount to withdraw\\n   */\\n  function withdraw(address recipient) external nonReentrant onlyOwner {\\n    if (address(LINK) == address(0)) {\\n      revert LinkNotSet();\\n    }\\n    if (s_withdrawableTokens == 0) {\\n      revert InsufficientBalance();\\n    }\\n    uint96 amount = s_withdrawableTokens;\\n    s_withdrawableTokens -= amount;\\n    s_totalBalance -= amount;\\n    if (!LINK.transfer(recipient, amount)) {\\n      revert InsufficientBalance();\\n    }\\n  }\\n\\n  /*\\n   * @notice withdraw native earned through fulfilling requests\\n   * @param recipient where to send the funds\\n   * @param amount amount to withdraw\\n   */\\n  function withdrawNative(address payable recipient) external nonReentrant onlyOwner {\\n    if (s_withdrawableNative == 0) {\\n      revert InsufficientBalance();\\n    }\\n    // Prevent re-entrancy by updating state before transfer.\\n    uint96 amount = s_withdrawableNative;\\n    s_withdrawableNative -= amount;\\n    s_totalNativeBalance -= amount;\\n    (bool sent, ) = recipient.call{value: amount}(\\\"\\\");\\n    if (!sent) {\\n      revert FailedToSendNative();\\n    }\\n  }\\n\\n  function onTokenTransfer(address /* sender */, uint256 amount, bytes calldata data) external override nonReentrant {\\n    if (msg.sender != address(LINK)) {\\n      revert OnlyCallableFromLink();\\n    }\\n    if (data.length != 32) {\\n      revert InvalidCalldata();\\n    }\\n    uint256 subId = abi.decode(data, (uint256));\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    // We do not check that the sender is the subscription owner,\\n    // anyone can fund a subscription.\\n    uint256 oldBalance = s_subscriptions[subId].balance;\\n    s_subscriptions[subId].balance += uint96(amount);\\n    s_totalBalance += uint96(amount);\\n    emit SubscriptionFunded(subId, oldBalance, oldBalance + amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable override nonReentrant {\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    // We do not check that the msg.sender is the subscription owner,\\n    // anyone can fund a subscription.\\n    // We also do not check that msg.value > 0, since that's just a no-op\\n    // and would be a waste of gas on the caller's part.\\n    uint256 oldNativeBalance = s_subscriptions[subId].nativeBalance;\\n    s_subscriptions[subId].nativeBalance += uint96(msg.value);\\n    s_totalNativeBalance += uint96(msg.value);\\n    emit SubscriptionFundedWithNative(subId, oldNativeBalance, oldNativeBalance + msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    public\\n    view\\n    override\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address subOwner, address[] memory consumers)\\n  {\\n    subOwner = s_subscriptionConfigs[subId].owner;\\n    if (subOwner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    return (\\n      s_subscriptions[subId].balance,\\n      s_subscriptions[subId].nativeBalance,\\n      s_subscriptions[subId].reqCount,\\n      subOwner,\\n      s_subscriptionConfigs[subId].consumers\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function getActiveSubscriptionIds(\\n    uint256 startIndex,\\n    uint256 maxCount\\n  ) external view override returns (uint256[] memory ids) {\\n    uint256 numSubs = s_subIds.length();\\n    if (startIndex >= numSubs) revert IndexOutOfRange();\\n    uint256 endIndex = startIndex + maxCount;\\n    endIndex = endIndex > numSubs || maxCount == 0 ? numSubs : endIndex;\\n    uint256 idsLength = endIndex - startIndex;\\n    ids = new uint256[](idsLength);\\n    for (uint256 idx = 0; idx < idsLength; ++idx) {\\n      ids[idx] = s_subIds.at(idx + startIndex);\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function createSubscription() external override nonReentrant returns (uint256 subId) {\\n    // Generate a subscription id that is globally unique.\\n    uint64 currentSubNonce = s_currentSubNonce;\\n    subId = uint256(\\n      keccak256(abi.encodePacked(msg.sender, blockhash(block.number - 1), address(this), currentSubNonce))\\n    );\\n    // Increment the subscription nonce counter.\\n    s_currentSubNonce = currentSubNonce + 1;\\n    // Initialize storage variables.\\n    address[] memory consumers = new address[](0);\\n    s_subscriptions[subId] = Subscription({balance: 0, nativeBalance: 0, reqCount: 0});\\n    s_subscriptionConfigs[subId] = SubscriptionConfig({\\n      owner: msg.sender,\\n      requestedOwner: address(0),\\n      consumers: consumers\\n    });\\n    // Update the s_subIds set, which tracks all subscription ids created in this contract.\\n    s_subIds.add(subId);\\n\\n    emit SubscriptionCreated(subId, msg.sender);\\n    return subId;\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function requestSubscriptionOwnerTransfer(\\n    uint256 subId,\\n    address newOwner\\n  ) external override onlySubOwner(subId) nonReentrant {\\n    // Proposing to address(0) would never be claimable so don't need to check.\\n    SubscriptionConfig storage subscriptionConfig = s_subscriptionConfigs[subId];\\n    if (subscriptionConfig.requestedOwner != newOwner) {\\n      subscriptionConfig.requestedOwner = newOwner;\\n      emit SubscriptionOwnerTransferRequested(subId, msg.sender, newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external override nonReentrant {\\n    address oldOwner = s_subscriptionConfigs[subId].owner;\\n    if (oldOwner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (s_subscriptionConfigs[subId].requestedOwner != msg.sender) {\\n      revert MustBeRequestedOwner(s_subscriptionConfigs[subId].requestedOwner);\\n    }\\n    s_subscriptionConfigs[subId].owner = msg.sender;\\n    s_subscriptionConfigs[subId].requestedOwner = address(0);\\n    emit SubscriptionOwnerTransferred(subId, oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function addConsumer(uint256 subId, address consumer) external override onlySubOwner(subId) nonReentrant {\\n    ConsumerConfig storage consumerConfig = s_consumers[consumer][subId];\\n    if (consumerConfig.active) {\\n      // Idempotence - do nothing if already added.\\n      // Ensures uniqueness in s_subscriptions[subId].consumers.\\n      return;\\n    }\\n    // Already maxed, cannot add any more consumers.\\n    address[] storage consumers = s_subscriptionConfigs[subId].consumers;\\n    if (consumers.length == MAX_CONSUMERS) {\\n      revert TooManyConsumers();\\n    }\\n    // consumerConfig.nonce is 0 if the consumer had never sent a request to this subscription\\n    // otherwise, consumerConfig.nonce is non-zero\\n    // in both cases, use consumerConfig.nonce as is and set active status to true\\n    consumerConfig.active = true;\\n    consumers.push(consumer);\\n\\n    emit SubscriptionConsumerAdded(subId, consumer);\\n  }\\n\\n  function _deleteSubscription(uint256 subId) internal returns (uint96 balance, uint96 nativeBalance) {\\n    address[] storage consumers = s_subscriptionConfigs[subId].consumers;\\n    balance = s_subscriptions[subId].balance;\\n    nativeBalance = s_subscriptions[subId].nativeBalance;\\n    // Note bounded by MAX_CONSUMERS;\\n    // If no consumers, does nothing.\\n    uint256 consumersLength = consumers.length;\\n    for (uint256 i = 0; i < consumersLength; ++i) {\\n      delete s_consumers[consumers[i]][subId];\\n    }\\n    delete s_subscriptionConfigs[subId];\\n    delete s_subscriptions[subId];\\n    s_subIds.remove(subId);\\n    if (balance != 0) {\\n      s_totalBalance -= balance;\\n    }\\n    if (nativeBalance != 0) {\\n      s_totalNativeBalance -= nativeBalance;\\n    }\\n    return (balance, nativeBalance);\\n  }\\n\\n  function _cancelSubscriptionHelper(uint256 subId, address to) internal {\\n    (uint96 balance, uint96 nativeBalance) = _deleteSubscription(subId);\\n\\n    // Only withdraw LINK if the token is active and there is a balance.\\n    if (address(LINK) != address(0) && balance != 0) {\\n      if (!LINK.transfer(to, uint256(balance))) {\\n        revert InsufficientBalance();\\n      }\\n    }\\n\\n    // send native to the \\\"to\\\" address using call\\n    (bool success, ) = to.call{value: uint256(nativeBalance)}(\\\"\\\");\\n    if (!success) {\\n      revert FailedToSendNative();\\n    }\\n    emit SubscriptionCanceled(subId, to, balance, nativeBalance);\\n  }\\n\\n  modifier onlySubOwner(uint256 subId) {\\n    _onlySubOwner(subId);\\n    _;\\n  }\\n\\n  function _onlySubOwner(uint256 subId) internal view {\\n    address subOwner = s_subscriptionConfigs[subId].owner;\\n    if (subOwner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (msg.sender != subOwner) {\\n      revert MustBeSubOwner(subOwner);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9607dc0b37c82e7cda56afb21096205bc975673df795a704c7d04a9f5dcf6bb2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// A mock for testing code that relies on VRFCoordinatorV2_5.\\npragma solidity ^0.8.19;\\n\\n// solhint-disable-next-line no-unused-import\\nimport {IVRFCoordinatorV2Plus, IVRFSubscriptionV2Plus} from \\\"../dev/interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"../dev/libraries/VRFV2PlusClient.sol\\\";\\nimport {SubscriptionAPI} from \\\"../dev/SubscriptionAPI.sol\\\";\\nimport {VRFConsumerBaseV2Plus} from \\\"../dev/VRFConsumerBaseV2Plus.sol\\\";\\n\\ncontract VRFCoordinatorV2_5Mock is SubscriptionAPI, IVRFCoordinatorV2Plus {\\n  uint96 public immutable i_base_fee;\\n  uint96 public immutable i_gas_price;\\n  int256 public immutable i_wei_per_unit_link;\\n\\n  error InvalidRequest();\\n  error InvalidRandomWords();\\n  error InvalidExtraArgsTag();\\n  error NotImplemented();\\n\\n  event RandomWordsRequested(\\n    bytes32 indexed keyHash,\\n    uint256 requestId,\\n    uint256 preSeed,\\n    uint256 indexed subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords,\\n    bytes extraArgs,\\n    address indexed sender\\n  );\\n  event RandomWordsFulfilled(\\n    uint256 indexed requestId,\\n    uint256 outputSeed,\\n    uint256 indexed subId,\\n    uint96 payment,\\n    bool nativePayment,\\n    bool success,\\n    bool onlyPremium\\n  );\\n  event ConfigSet();\\n\\n  uint64 internal s_currentSubId;\\n  uint256 internal s_nextRequestId = 1;\\n  uint256 internal s_nextPreSeed = 100;\\n\\n  struct Request {\\n    uint256 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n  mapping(uint256 => Request) internal s_requests; /* requestId */ /* request */\\n\\n  constructor(uint96 _baseFee, uint96 _gasPrice, int256 _weiPerUnitLink) SubscriptionAPI() {\\n    i_base_fee = _baseFee;\\n    i_gas_price = _gasPrice;\\n    i_wei_per_unit_link = _weiPerUnitLink;\\n    setConfig();\\n  }\\n\\n  /**\\n   * @notice Sets the configuration of the vrfv2 mock coordinator\\n   */\\n  function setConfig() public onlyOwner {\\n    s_config = Config({\\n      minimumRequestConfirmations: 0,\\n      maxGasLimit: 0,\\n      stalenessSeconds: 0,\\n      gasAfterPaymentCalculation: 0,\\n      reentrancyLock: false,\\n      fulfillmentFlatFeeNativePPM: 0,\\n      fulfillmentFlatFeeLinkDiscountPPM: 0,\\n      nativePremiumPercentage: 0,\\n      linkPremiumPercentage: 0\\n    });\\n    emit ConfigSet();\\n  }\\n\\n  function consumerIsAdded(uint256 _subId, address _consumer) public view returns (bool) {\\n    return s_consumers[_consumer][_subId].active;\\n  }\\n\\n  modifier onlyValidConsumer(uint256 _subId, address _consumer) {\\n    if (!consumerIsAdded(_subId, _consumer)) {\\n      revert InvalidConsumer(_subId, _consumer);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\\n   * @notice consumer.\\n   *\\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\\n   * @dev against the real coordinator a small amount of additional LINK is required.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   */\\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   * @param _words user-provided random words\\n   */\\n  function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\\n    uint256 startGas = gasleft();\\n    if (s_requests[_requestId].subId == 0) {\\n      revert InvalidRequest();\\n    }\\n    Request memory req = s_requests[_requestId];\\n\\n    if (_words.length == 0) {\\n      _words = new uint256[](req.numWords);\\n      for (uint256 i = 0; i < req.numWords; i++) {\\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\\n      }\\n    } else if (_words.length != req.numWords) {\\n      revert InvalidRandomWords();\\n    }\\n\\n    VRFConsumerBaseV2Plus v;\\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\\n    s_config.reentrancyLock = true;\\n    // solhint-disable-next-line avoid-low-level-calls, no-unused-vars\\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\\n    s_config.reentrancyLock = false;\\n\\n    bool nativePayment = uint8(req.extraArgs[req.extraArgs.length - 1]) == 1;\\n\\n    uint256 rawPayment = i_base_fee + ((startGas - gasleft()) * i_gas_price);\\n    if (!nativePayment) {\\n      rawPayment = (1e18 * rawPayment) / uint256(i_wei_per_unit_link);\\n    }\\n    uint96 payment = uint96(rawPayment);\\n\\n    _chargePayment(payment, nativePayment, req.subId);\\n\\n    delete (s_requests[_requestId]);\\n    emit RandomWordsFulfilled(_requestId, _requestId, req.subId, payment, nativePayment, success, false);\\n  }\\n\\n  function _chargePayment(uint96 payment, bool nativePayment, uint256 subId) internal {\\n    Subscription storage subcription = s_subscriptions[subId];\\n    if (nativePayment) {\\n      uint96 prevBal = subcription.nativeBalance;\\n      if (prevBal < payment) {\\n        revert InsufficientBalance();\\n      }\\n      subcription.nativeBalance = prevBal - payment;\\n      s_withdrawableNative += payment;\\n    } else {\\n      uint96 prevBal = subcription.balance;\\n      if (prevBal < payment) {\\n        revert InsufficientBalance();\\n      }\\n      subcription.balance = prevBal - payment;\\n      s_withdrawableTokens += payment;\\n    }\\n  }\\n\\n  /**\\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\\n   *\\n   * @param _subId the subscription to fund\\n   * @param _amount the amount to fund\\n   */\\n  function fundSubscription(uint256 _subId, uint256 _amount) public {\\n    if (s_subscriptionConfigs[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    uint256 oldBalance = s_subscriptions[_subId].balance;\\n    s_subscriptions[_subId].balance += uint96(_amount);\\n    s_totalBalance += uint96(_amount);\\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\\n  }\\n\\n  /// @dev Convert the extra args bytes into a struct\\n  /// @param extraArgs The extra args bytes\\n  /// @return The extra args struct\\n  function _fromBytes(bytes calldata extraArgs) internal pure returns (VRFV2PlusClient.ExtraArgsV1 memory) {\\n    if (extraArgs.length == 0) {\\n      return VRFV2PlusClient.ExtraArgsV1({nativePayment: false});\\n    }\\n    if (bytes4(extraArgs) != VRFV2PlusClient.EXTRA_ARGS_V1_TAG) revert InvalidExtraArgsTag();\\n    return abi.decode(extraArgs[4:], (VRFV2PlusClient.ExtraArgsV1));\\n  }\\n\\n  function requestRandomWords(\\n    VRFV2PlusClient.RandomWordsRequest calldata _req\\n  ) external override nonReentrant onlyValidConsumer(_req.subId, msg.sender) returns (uint256) {\\n    uint256 subId = _req.subId;\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n\\n    uint256 requestId = s_nextRequestId++;\\n    uint256 preSeed = s_nextPreSeed++;\\n\\n    bytes memory extraArgsBytes = VRFV2PlusClient._argsToBytes(_fromBytes(_req.extraArgs));\\n    s_requests[requestId] = Request({\\n      subId: _req.subId,\\n      callbackGasLimit: _req.callbackGasLimit,\\n      numWords: _req.numWords,\\n      extraArgs: _req.extraArgs\\n    });\\n\\n    emit RandomWordsRequested(\\n      _req.keyHash,\\n      requestId,\\n      preSeed,\\n      _req.subId,\\n      _req.requestConfirmations,\\n      _req.callbackGasLimit,\\n      _req.numWords,\\n      extraArgsBytes,\\n      msg.sender\\n    );\\n    return requestId;\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function removeConsumer(\\n    uint256 _subId,\\n    address _consumer\\n  ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\\n    if (!s_consumers[_consumer][_subId].active) {\\n      revert InvalidConsumer(_subId, _consumer);\\n    }\\n    address[] memory consumers = s_subscriptionConfigs[_subId].consumers;\\n    uint256 lastConsumerIndex = consumers.length - 1;\\n    for (uint256 i = 0; i < consumers.length; ++i) {\\n      if (consumers[i] == _consumer) {\\n        address last = consumers[lastConsumerIndex];\\n        s_subscriptionConfigs[_subId].consumers[i] = last;\\n        s_subscriptionConfigs[_subId].consumers.pop();\\n        break;\\n      }\\n    }\\n    s_consumers[_consumer][_subId].active = false;\\n    emit SubscriptionConsumerRemoved(_subId, _consumer);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function cancelSubscription(uint256 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\\n    (uint96 balance, uint96 nativeBalance) = _deleteSubscription(_subId);\\n\\n    (bool success, ) = _to.call{value: uint256(nativeBalance)}(\\\"\\\");\\n    if (!success) {\\n      revert FailedToSendNative();\\n    }\\n    emit SubscriptionCanceled(_subId, _to, balance, nativeBalance);\\n  }\\n\\n  function pendingRequestExists(uint256 /*subId*/) public pure override returns (bool) {\\n    revert NotImplemented();\\n  }\\n}\\n\",\"keccak256\":\"0x5d27319ad572630b7078be005a9dee4418ac60b7d2fe9cbe40b510830cb4d1cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptSubscriptionOwnerTransfer(uint256)": {
        "details": "will revert if original owner of subId has not requested that msg.sender become the new owner.",
        "params": {
          "subId": "- ID of the subscription"
        }
      },
      "addConsumer(uint256,address)": {
        "params": {
          "consumer": "- New consumer which can use the subscription",
          "subId": "- ID of the subscription"
        }
      },
      "cancelSubscription(uint256,address)": {
        "params": {
          "subId": "- ID of the subscription",
          "to": "- Where to send the remaining LINK to"
        }
      },
      "createSubscription()": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);",
        "returns": {
          "subId": "- A unique subscription id."
        }
      },
      "fulfillRandomWords(uint256,address)": {
        "details": "This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.",
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill"
        }
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill",
          "_words": "user-provided random words"
        }
      },
      "fundSubscription(uint256,uint256)": {
        "params": {
          "_amount": "the amount to fund",
          "_subId": "the subscription to fund"
        }
      },
      "fundSubscriptionWithNative(uint256)": {
        "params": {
          "subId": "- ID of the subscription"
        }
      },
      "getActiveSubscriptionIds(uint256,uint256)": {
        "details": "the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state",
        "params": {
          "maxCount": "maximum number of subscriptions to return, 0 to return all",
          "startIndex": "index of the subscription to start from"
        }
      },
      "getSubscription(uint256)": {
        "params": {
          "subId": "- ID of the subscription"
        },
        "returns": {
          "balance": "- LINK balance of the subscription in juels.",
          "consumers": "- list of consumer address which are able to use this subscription.",
          "nativeBalance": "- native balance of the subscription in wei.",
          "reqCount": "- Requests count of subscription.",
          "subOwner": "- owner of the subscription."
        }
      },
      "ownerCancelSubscription(uint256)": {
        "details": "notably can be called even if there are pending requests, outstanding ones may fail onchain",
        "params": {
          "subId": "subscription id"
        }
      },
      "recoverFunds(address)": {
        "params": {
          "to": "address to send link to"
        }
      },
      "recoverNativeFunds(address)": {
        "params": {
          "to": "address to send native to"
        }
      },
      "removeConsumer(uint256,address)": {
        "params": {
          "consumer": "- Consumer to remove from the subscription",
          "subId": "- ID of the subscription"
        }
      },
      "requestSubscriptionOwnerTransfer(uint256,address)": {
        "params": {
          "newOwner": "- proposed new owner of the subscription",
          "subId": "- ID of the subscription"
        }
      },
      "setLINKAndLINKNativeFeed(address,address)": {
        "params": {
          "link": "- address of link token",
          "linkNativeFeed": "address of the link native feed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "acceptSubscriptionOwnerTransfer(uint256)": {
        "notice": "Accept subscription owner transfer."
      },
      "addConsumer(uint256,address)": {
        "notice": "Add a consumer to a VRF subscription."
      },
      "cancelSubscription(uint256,address)": {
        "notice": "Cancel a subscription"
      },
      "createSubscription()": {
        "notice": "Create a VRF subscription."
      },
      "fulfillRandomWords(uint256,address)": {
        "notice": "fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer."
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "notice": "fulfillRandomWordsWithOverride allows the user to pass in their own random words."
      },
      "fundSubscription(uint256,uint256)": {
        "notice": "fundSubscription allows funding a subscription with an arbitrary amount for testing."
      },
      "fundSubscriptionWithNative(uint256)": {
        "notice": "Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."
      },
      "getActiveSubscriptionIds(uint256,uint256)": {
        "notice": "Paginate through all active VRF subscriptions."
      },
      "getSubscription(uint256)": {
        "notice": "Get a VRF subscription."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "ownerCancelSubscription(uint256)": {
        "notice": "Owner cancel subscription, sends remaining link directly to the subscription owner."
      },
      "recoverFunds(address)": {
        "notice": "Recover link sent with transfer instead of transferAndCall."
      },
      "recoverNativeFunds(address)": {
        "notice": "Recover native sent with transfer/call/send instead of fundSubscription."
      },
      "removeConsumer(uint256,address)": {
        "notice": "Remove a consumer from a VRF subscription."
      },
      "requestSubscriptionOwnerTransfer(uint256,address)": {
        "notice": "Request subscription owner transfer."
      },
      "setConfig()": {
        "notice": "Sets the configuration of the vrfv2 mock coordinator"
      },
      "setLINKAndLINKNativeFeed(address,address)": {
        "notice": "set the LINK token contract and link native feed to be used by this coordinator"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 993,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "LINK",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)352"
      },
      {
        "astId": 997,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "LINK_NATIVE_FEED",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)229"
      },
      {
        "astId": 1083,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_consumers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ConsumerConfig)1076_storage))"
      },
      {
        "astId": 1088,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_subscriptionConfigs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(SubscriptionConfig)1069_storage)"
      },
      {
        "astId": 1093,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_subscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Subscription)1061_storage)"
      },
      {
        "astId": 1095,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_currentSubNonce",
        "offset": 0,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 1098,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_subIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(UintSet)835_storage"
      },
      {
        "astId": 1100,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_totalBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_uint96"
      },
      {
        "astId": 1102,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_totalNativeBalance",
        "offset": 12,
        "slot": "10",
        "type": "t_uint96"
      },
      {
        "astId": 1104,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_withdrawableTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_uint96"
      },
      {
        "astId": 1106,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_withdrawableNative",
        "offset": 12,
        "slot": "11",
        "type": "t_uint96"
      },
      {
        "astId": 1188,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_config",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Config)1185_storage"
      },
      {
        "astId": 2695,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_currentSubId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 2698,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_nextRequestId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2701,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_nextPreSeed",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2715,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_requests",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Request)2710_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)229": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)352": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ConsumerConfig)1076_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SubscriptionAPI.ConsumerConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ConsumerConfig)1076_storage)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ConsumerConfig)1076_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionAPI.ConsumerConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ConsumerConfig)1076_storage"
      },
      "t_mapping(t_uint256,t_struct(Request)2710_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFCoordinatorV2_5Mock.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)2710_storage"
      },
      "t_mapping(t_uint256,t_struct(Subscription)1061_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionAPI.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)1061_storage"
      },
      "t_mapping(t_uint256,t_struct(SubscriptionConfig)1069_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionAPI.SubscriptionConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SubscriptionConfig)1069_storage"
      },
      "t_struct(Config)1185_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.Config",
        "members": [
          {
            "astId": 1168,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "minimumRequestConfirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1170,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "maxGasLimit",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1172,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "reentrancyLock",
            "offset": 6,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1174,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "stalenessSeconds",
            "offset": 7,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1176,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "gasAfterPaymentCalculation",
            "offset": 11,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1178,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "fulfillmentFlatFeeNativePPM",
            "offset": 15,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1180,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "fulfillmentFlatFeeLinkDiscountPPM",
            "offset": 19,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1182,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "nativePremiumPercentage",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1184,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "linkPremiumPercentage",
            "offset": 24,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ConsumerConfig)1076_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.ConsumerConfig",
        "members": [
          {
            "astId": 1071,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1073,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "nonce",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1075,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "pendingReqCount",
            "offset": 9,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)2710_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2_5Mock.Request",
        "members": [
          {
            "astId": 2703,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "subId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2705,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "callbackGasLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 2707,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "numWords",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 2709,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "extraArgs",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)363_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 358,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 362,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Subscription)1061_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.Subscription",
        "members": [
          {
            "astId": 1056,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1058,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "nativeBalance",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1060,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "reqCount",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SubscriptionConfig)1069_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.SubscriptionConfig",
        "members": [
          {
            "astId": 1063,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1065,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "requestedOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1068,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "consumers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UintSet)835_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 834,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)363_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}